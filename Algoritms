 алгоритмов, т.е. мето­
дов решения задач, которые пригодны для реализации на компьютере.
 мы от структур данных — схем для организации данных, которые позволяют
выполнять эффективную обработку этих данных алгоритмами.
 базовую модель программирования. абстракцию данных
 абстрактные типы данных
(АТД), которые делают возможным модульное программирование.
 интерфейса прикладного
программирования (applications programming interface — API)
 три фундамен­тальных АТД: контейнер, очередь и стек.
 Производительность является основной темой при изучении алгоритмов. научный метод - мы выдвигаем гипотезы о производительности, создаем
математические модели, а затем выполняем эксперименты с целью их проверки; при
необходимости этот процесс повторяется.
 есть мнение что каждый алгоритм является
методом, который можно реализовать на любом компьютере и с помощью любого языка
программирования
 алгоритма Евклида, который был
разработан более 2300 лет назад для нахождения наибольшего общего делителя двух
чисел:
 public static int gcd(int p, int q)
{
if (q == 0) return p;
int r = p % q;
return gcd(q, r);
}
Отрасль вычислительной техники, которая изучает  вопросы выбора алгоритма, называется анализом
алгоритмов.
 Тип чисел автоматически повышается до более объемлющего типа, если не проис­
ходит потери информации.
 Объявления создают переменные указанного типа и присваивают им имена — иден­
тификаторы.
■ Операторы присваивания связывают значения типов данных (определенные выра­
жениями) с переменными. В языке Java имеется также несколько идиом неявного
присваивания для изменения значения некоторой переменной относительно теку­
щего значения этой переменной — например, увеличение значения целой пере­
менной на единицу.
■ Условные операторы предназначены для простого изменения потока выполнения,
когда в зависимости от заданного условия выполняется один из двух блоков. if
■ Циклы предназначены для более существенного изменения потока выполнения:
операторы в блоке выполняются, пока верно заданное условие. while
■ Вызовы и возвраты относятся к статическим методам, которые предоставляют еще
один способ изменения потока выполнения и организации кода.
 Массивы
Поиск максимального значения в массиве 
double max = а[0];
for (int i = 1; i < a.length; i++)
if (a[i] > max) max = a[i];

Вычисление среднего значения массива
int N = a.length;
double sum = 0.0;
for (int i = 0; i < N; i++)
sum += a[i];

Копирование значений в другой массив
double average = sum / N;
int N = a.length;
doublet] b = new double[N];
for (int i = 0; i < N; i++)
b[i] = a[i];

Перестановка элементов массивав обратном порядке
int N = a.length;
for (int i = 0; i < N/2; i++)
{
double temp = a[i];
a[i] = a[N-l-i] ;
a[N-i-l] = temp;
}
Умножение матрицы на матрицу (квадратные матрицы) а[][]*Ь[][] =с[][]

int N = a.length;
doublet] [] c = new double[N] [N];
for (int i = 0; i < N; i++)
for (int j = 0; j < N; j++)
{ // Вычисление скалярного произведения
// строки i и столбца j.
for (int k = 0; k < N; k++)
c[i][j] += a[i] [k]*b[k] [j];
}

имя массива относится ко всемумассиву: если присвоить имя одного массива другому, то оба имени будут указывать на один и тот же массив
Эта ситуация называется налож ением и может приводить к трудноуловимым ошиб­кам. Если требуется создать копию массива, то нужно объявить, создать и инициали­ зировать новый массив, а затем скопировать все элементы исходного массива в новый массив
статический метод — это последовательность операторов, которые при вызове статического метода выполняются один за другим (в разных яп называют функцией) (не путать c методом экземпляра)
Метод инкапсулирует вычисление, принимает аргументы (значения заданных типов данных) и на их основе вычисляет возвращаемое значение какого-то типа данных или вызывает побочный эффект, кото­рый зависит от аргументов (например, вывод значения)
Типичные реализации статических методов

Абсолютная величина значения int 
public static int abs(int x) {
if (x < 0) return -x;
else return x;
}

Абсолютная величина значения double
public static double abs(double x) {
if (x < 0.0) return -x;
else return x;
}

Проверка, простое ли число 
public static boolean isPrime(int N) {
if (N < 2) return false;
for (int i = 2; i*i <= N; i++)
if IN % i == 0) return false;
return true;
}

Квадратный корень (метод Ньютона)
public static double sqrt(double c) {
if (c < 0) return Double.NaN;
double err = le-15;
double t = c;
while (Math.abs(t - c/t) > err * t)
t = (c/t + t) / 2.0;38

Гипотенуза прямоугольного треугольника 
public static double hypotenuse(
double a, double b)
{ return Math.sqrt(a*a + b*b); 
}

Гармоническое число 
public static double H(int N) {
double sum = 0.0;
for (int i = 1; i <= N; i++)
sum += 1.0 / i;
return sum;
}

 Свойства методов:
-Аргументы передаются по значению.
-Имена методов могут быть перегружены
-Метод возвращает единственное значение но может содержать несколько операторов возврата
-Метод может иметь побочные эффекты (void)

Рекурсия - метод вызывает сам себя
■ В рекурсии должен быть базовый вариант: мы всегда помещаем в начало рекурсивной программы условный оператор с оператором return.
■ Рекурсивные вызовы должны обращаться к подзадачам, меньшим в некотором смыс­ле, чтобы рекурсивные вызовы сходились к базовому варианту.
■ Рекурсивные вызовы не должны обращаться к перекры вающимся подзадачам.

 Базовая модель для программирования на Java — это разработка программы, предназначенной для решения конкретной вычислительной за­дачи, с помощью создания библиотеки статических методов, один из которых называ­ется main().
 модульное программирование — когда создаются библиотеки статических методов {модули) (и статический метод из одной библиотеки может вызывать статиче­
ские методы, определенные в других библиотеках.)

 Мы будем единообразно описывать необходимые нам методы библиотек в интерфейсах прикладного программирования
(API-инт ерфейсах ), которые содержат имя библиотеки и сигнатуры и краткие описания всех задействованных нами методов. Мы называем клиентом программу, которая вызывает какой-то метод из другой библиотеки, и реализацией — Java-код, который реализует методы из API-интерфейса.
 public class Math
static double abs (double a) абсолютное значение a
static double max (double a , double b) максимальное значение из а и b
static double min (double a , double b) минимальное значение из а и b
Примечание 1. Функции a b s ( ), m a x() и m in () определены также для i n t , l o n g и flo a t.
static double sin(double theta) функция синуса
static double cos (double theta) функция косинуса
static double tan(double theta) функция тангенса
Примечание 2. Углы выражаются в радианах. Для преобразования в градусы и обратно
используйте методы to D e g r e e s O и to R a d i a n s O .
Примечание 3. Для обратных функций имеются функции a s i n ( ) , a c o s ( ) и a ta n ( ).
static double exp(double a) экспонента (еа)
static double log(double a) натуральный логарифм (\oga или In а)
static double pow(double a , double b) возведение а в степень Ъ (аь)
static double random() случайное число из диапазона [0, 1)
static double sqrt(double a) квадратный корень из а
static double E значение е (константа)
static double PI значение л (константа)
 Библиотека Arrays не входит в пакет java.lang, поэтому для ее использования
необходим оператор import,

