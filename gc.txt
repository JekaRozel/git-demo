git clone [--template=<template_directory>]
	  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
	  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
	  [--dissociate] [--separate-git-dir <git dir>]
	  [--depth <depth>] [--[no-]single-branch] [--no-tags]
	  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]
	  [--[no-]remote-submodules] [--jobs <n>] [--] <repository>
	  [<directory>]
\\\\\\\\\\\\\\\
git config [<file-option>] [--type=<type>] [--show-origin] [-z|--null] name [value [value_regex]]
git config [<file-option>] [--type=<type>] --add name value
git config [<file-option>] [--type=<type>] --replace-all name value [value_regex]
git config [<file-option>] [--type=<type>] [--show-origin] [-z|--null] --get name [value_regex]
git config [<file-option>] [--type=<type>] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [<file-option>] [--type=<type>] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch name URL
git config [<file-option>] --unset name [value_regex]
git config [<file-option>] --unset-all name [value_regex]
git config [<file-option>] --rename-section old_name new_name
git config [<file-option>] --remove-section name
git config [<file-option>] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [<file-option>] --get-color name [default]
git config [<file-option>] --get-colorbool name [stdout-is-tty]
git config [<file-option>] -e | --edit
/////////////////////////////////

git remote -v
git remote set-url origin скопированная с репозитория ссылка или SSH
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

git commands
git clone url и папку куда сохроняем на компе копировать с репозитория
git add file.txt Добавление одного файла  (идексировать файл)
git add Documentation/\*.txt Добавление содержимого всех *.txt файлов из Documentation директории и её поддиректорий:
git add git-*.sh Добавление содержимого из всех git-*.sh скриптов:
git commit зафиксировать изменениея Обязательно комментарий -am "комментарий"
git push отправить в репозиторий
git pull подтянуть новые файлы с репозитория 
git status -s проверка состояния 
git log найти коммит, содержащий некоторый искомый файл --stat --summary
git checkout Switch branches or restore working tree files
git mv - Move or rename a file, a directory, or a symlink
git rm Documentation/\*.txt - Удаление всех *.txt файлов из индекса, которые находятся в директории Documentation и любой из её поддиректорий.
git rm --cached file.txt Удаление файла только из индекса (сохраняет его в файловой системе).
git checkout переключаться между ветками (коммитами, тегами) или восстановить файлы рабочего каталога. подходит не только для переключения между ветками, но и между коммитами и тегами
git checkout -b имяветки  Создание новой ветки
git branch -a Посмотреть ветки -все 
git merge имявносиамойветки добатвить изменения из ветки в основной репозиторий
git log просмотреть историю коммитов в репозитории, производить поиск/фильтрацию коммитов по тексту сообщений, измененным файлам, датам, авторам, веткам и прочим параметрам.
git stash - это команда для хранения изменений, которые по каким-либо причинам не нужно включать в коммит. Например, в ситуации, когда нужно быстро переключиться между ветками, но работа ещё не завершена. временное хранилище stash сохраняет текущее состояние репозитория, то есть измененные отслеживаемые файлы, без создания коммита. Неотслеживаемые файлы в stash не включаются.
git reset --soft HEAD~ рабочий репозиторий откатывается на предыдущий
git reset --mixed HEAD~ рабочий репозиторий откатывается на предыдущий и меняется индекс
git reset --hard HEAD~ рабочий репозиторий откатывается на предыдущий, меняется индекс и рабочий каталог. так же меняется содержимое файла README.md
git-fetch - Скачать объекты и ссылки с удалённого репозитория. --all Скачать всё с удалённого репозитория.
-t --tags   Fetch all tags from the remote Скачать все метки с удалённого репозитория.
git fetch origin Обновить состояние всех веток в соответствии с репозиторием origin:
git-pull - Скачать и синхронизироваться с другим репозиторием или веткой. Выполнить слияние текущей ветки с удалённой веткой, названной next: git pull origin next
git-push - Обновить ссылки на удалённом репозитории вместе со связанными объектами. git push origin branch_name Загрузить изменения в конкретную ветку на удалённом репозитории 
git diff cравнения состояния рабочей директории и последнего коммита.
git diff branch1 maste Разница веток branch1 и master.
git log --oneline показывает коммиты

 для git pull [options] [<repository> [<refspec>…​]]:
--no-edit Принять автоматически сгенерированное сообщение (обычно это не рекомендуется).
--no-tags По умолчанию метки, которые указывают на объекты, которые загружаются из удаленного репозитория, извлекаются и сохраняются локально. С использованием этого параметра, метки не будут загружаться.
<repository> "Удалённый" репозиторий, с которым необходимо синхронизироваться. На месте этого параметра может стоять URL или имя репозитория.
<refspec> определяет, какие ссылки загружать и какие локальные ссылки обновлять. Если этот параметр не указан, искомые ссылки считываются с переменных remote.<repository>.fetch (см. git-fetch[1]).



в stash для просмотра записей можно воспользоваться параметром list. Для возврата сохраненных изменений можно воспользоваться командами git stash pop или git stash apply. Если записей в  stash несколько, можно указать индекс записи, которую необходимо применить (указана в фигурных скобках). Если индекс не указан, применяются изменения последней добавленной записи. Для удаления записей из stash используется команда git stash drop. Принцип работы аналогичен pop: можно указать индекс удаляемой записи, либо применить без индекса и удалить последнюю добавленную запись в  stash:  


 в git log управлять выводом деталей при помощи готовых пресетов и параметра --pretty. Доступные пресеты: oneline, short, full и fuller. 
 git log --pretty=format:"%h - %an, %ar : %s" Кроме того, git log позволяет полностью настроить формат вывода при помощи параметра format где %h - хэш коммита, $an - имя автора, %ar - относительная дата, %s - сообщение коммита.
 
 для checkout: 
-f --force Позволяет переключиться между ветками, даже если состояние файлов отличается от состояния, обозначенного как HEAD. Может использоваться для отмены локальных изменений.
-b <new_branch> Создаёт новую ветку с именем <new_branch>; для получения дополнительной информации см. git-branch[1].
git checkout master Переход к другой ветке
git checkout HEAD Переход к коммиту с тегом HEAD
git checkout HEAD~4 Переход к коммиту, предшествующему HEAD на 4
git log --grep="Commit message fragment"
git checkout b20eb8bdb8daf5fcec3ceb191c6b9b25507376ca Найти хеш коммита с использованием git log и перейти к этому коммиту:
git checkout -- file.txt Отменить незакоммиченные изменения в файле file.txt

 для commit add rm:
-a --all Будут закоммичены файлы, которые были изменены и удалены, но новые файлы, которые не были добавлены в индекс, закоммичены не будут.
-m <msg> --message=<msg> Используйте <msg> как сообщение коммита.
--amend Изменение последнего коммита. Вы можете изменить сообщение или снимок состояния коммита, но только если последний коммит не был опубликован.

рабочий каталог - это, по сути, каталог, в котором ведется работа;
индекс - это область подготовленных изменений, то есть те изменения, которые будут включены в коммит;
HEAD - это указатель на состояние текущей ветки, то есть на последний коммит в текущей ветке.

конфликтные ситуации:
упрощённое разрешение конфликтов. надо
git checkout --ours README.md # для отклонения всех изменений ветки master во всех конфликтных местах или
git checkout --theirs README.md текущей ветки


