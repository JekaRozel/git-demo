
   CSS (Cascading Style Sheets — Каскадные таблицы стилей) — язык,  определяющий внешний вид  HTML элементов в браузере.
   для тега HTML стили Указываются  атрибутом style, внутри которого указываются правила, которые будут применены к тегу. Все CSS стили записываются следующим образом: название стиля: значение;. Такую запись называют «инлайн» (inline), что означает заnись правила в одну строку с использованием атрибута style.
<p style="font-size: 32px;">Большой текст</p>
   font-size - наследуемый, такие стили применяются ко вложенным тегам
  Помимо стилей, которые наследуются для всех вложенных тегов, в CSS есть множество стилей, которые уникальны для того элемента, к которому их применили. Одним из таких свойств является border, позволяющий установить рамку вокруг элемента. Но эта же рамка не будет копироваться для каждого внутренного элемента.\

<div style="font-size: 20px;"> - для конкретно этого элемента div, а это для всех элементов div и p:
<style>
  div {
    font-size: 20px;
    font-weight; bold:
  }

  p {
    font-size: 10px;
  }
</style>
Классы помогают задать нужный нам стиль не для всех элементов на странице, а только для тех элементов, у которых указан необходимый класс. class
// HTML
<p class="paragraph">Текст нашего параграфа. Именно с помощью класса paragraph в CSS будут устанавливаться свойства для этого блока текста</p>
/* CSS */
.paragraph {
  color: #333333;
  font-weight: bold;

 }

    400 — normal
    700 — bold
для большинства стандартных шрифтов значения от 100 до 500 будут приравнены к normal, а от 600 до 900 к bold.
селектор по тегу(teg) или по классу(.class) или по идентификатору(#id)

курсив:
font-style, имеющее три значения:
    normal — обычный вывод текста.
    italic — курсивное начертание
    oblique — косое начертание
при значении italic в шрифте, который используется на странице, ищутся специальные курсивные символы, а при значении oblique берётся текущий шрифт и наклоняется. Если в шрифте отсутствуют символы, необходимые для italic, то автоматически правило ведёт себя также, как и oblique, в связи с чем italic является распространённым вариантом использования свойства font-style.

Капитель — вид строчных букв, размер которых совпадает (или приближен) к размеру заглавных букв.
font-variant с одним из двух основных значений:
    normal — нормальное написание текста
    small-caps — капитель

text-decoration с тремя основными свойствами:
    underline — Подчёркивание текста
    line-through — Перечёркивание текста
    overline — Надчёркивание текста

Для установки межстрочного расстояния используется правило line-height. В качестве значения используется число.

правило font-family, позволяеt выбрать один или несколько шрифтов, Наиболее распространёнными шрифтами являются:
* Times New Roman
* Arial
* Tahoma
* Verdana
* Courier New
При подключении стилей хорошей практикой является добавление универсального семейства шрифта в правило font-family. Таких семейств на данный момент 5:
    serif — шрифты с засечками (антиквы). Ярким представителем таких шрифтов является Times New Roman.
    sans-serif — шрифты без засечек (гротеск). Наиболее знакомыми такими шрифтами являются Arial и Verdana.
    cursive — курсивные шрифты.
    fantasy — декоративные шрифты. Это семейство используется реже всего. Дело в том, что декоративные шрифты слишком разные, чтобы они были взаимозаменяемые.
    monospace — моноширинные шрифты. К ним относятся шрифты, в которых все символы имеют одинаковую ширину. Очень часто их используют программисты в текстовых редакторах.
   Удобным способом задать свойства для шрифта является использование правила font, которое позволяет указать:
    font-style
    font-variant
    font-weight
    font-size / line-height (эти два правила записываются через слэш)
    font-family
  Обязательными из них являются font-size и font-family. Остальные можно не указывать. 
font: italic bold 24px Arial;
внутри свойства font. Вначале идут стилистические правила, затем размер шрифта и его межстрочный интервал и потом семейство шрифта. Это важно. также рекомендуется через запятую указать универсальное семейство шрифтов

                  Типографика
 Базовые правила:
    Используйте стандартные шрифты
    Используйте достаточный размер шрифта
    Используйте достаточный межстрочный интервал
    Выравнивайте текст по левому краю

border «рисует» вокруг блока границу с заданным цветом. Для этого принимаются 3 значения:
    ширина границы;
    тип границы;
    цвет границы.
Наиболее распространёнными типами рамок являются:
solid (сплошная)
dotted (пунктирная)
dashed (штриховая) 
<style> .border-dotted { border: 1px dotted #000;  } </style>

    Внутренние отступы padding & Внешний отступ margin
(в зависимости от количества указанных аргументов 4. 3. 2. 1.)   
padding: up right down left
padding: up right/left down
padding: up/down right/left
padding: all 4

Для управления высотой и шириной блочных элементов используются правила width и height, принимающие значения ширины и высоты соответственно (например, в пикселях или других доступных единицах измерения).

 <p class="card" style="background-color: #9c27b0;"></p>
будет использовать стили сразу из трёх источников:
    Стили браузера по умолчанию (у тега p по умолчанию есть отступы).
    Стили, указанные у класса card.
    Стили, указанные в атрибуте style.

По степени важности список выглядит следующим образом:
    Стили в атрибуте тега
    Стили в отдельном файле
    Стили по умолчанию, которые добавляет браузер
Если в одном из источников правила дублируются, то применятся те, которые были указаны последними.

У селекторов также существуют приоритеты «вес», чем цифра больше тем он важнее:

    №1 Стиль в атрибуте тега:     1000   inline 
    №2 Селектор по ID:                  100     #id
    №3 Селектор по классу:         10        .div
    №4 Селектор по тегу:              1          p 

Префиксы — указание браузеру, что мы хотим использовать новое правило или для поддержки старых браузеров, в которых может не быть правила. -webkit- -moz- (хром и мозила) Проверить есть ли в них необходимость https://caniuse.com/.
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);


Пиксель - основная абсолютная единица измерения в CSS. Устарели сантиметры, миллиметры, дюймы. Ещё существуют относительные. Они рассчитываются относительно чего-то. Основной относительная единица - проценты %. Они высчитываются исходя из размеров, указанных в ближайшем родительском блоке. 
Ещё есть:
    em. Похожи на процент, только указывают, во сколько раз больше должно быть значение.
    rem. Считаются относительно не родительского блока, а значения, указанного у тега html.
Цвета
                      color: rgba(255, 255, 255, 0.5) // Полупрозрачный белый цвет
background-color: rgba(0, 0, 0, 1) // Непрозрачный чёрный фон

медиа-запросы — специальные конструкции, помогающие браузеру определить, стоит использовать правила  для конкретного разрешения экрана. https://www.w3.org/TR/css3-mediaqueries/
@media (orientation: landscape) {
  .blocks {  // Правила для блоков } }
@media (orientation: portrait) {
  .blocks {  // Правила для блоков  } }
@media (max-width: 1000px) {
  body {  background-color: blue;  } }
Пример: белый цвет текста у параграфов для устройств с шириной экрана не больше 750 пикселей
<p>Менше 750ти</p>
<style>
@media (max-width: 750px) {
  р {   color: white;   } } </style>
 
Анимация
базовый принцип анимации в CSS на основе keyframes
@keyframes color-change {  // анимация }
    -Название анимации
    -Длительность анимации. Указывается в секундах (1s, 2s, 3s и так далее)
     -Бесконечная анимация или нет (если да, то нужен параметр infinite)
@keyframes color-change {
  // Внутри будет наша анимация }
Название анимации Вы выбираете самостоятельно. Внутри keyframes необходимо указать различные временные промежутки, в которых будут происходить изменения. Например, на старте (0% завершённости анимации) у нас будет голубой текст, в середине анимации (50%) — красный, и в конце (100%) — возвращаем голубой цвет.
  @keyframes color-change {
    0% {    color: blue;   }
    50% {    color: red;  }
    100% {    color: blue;   }  }
Чтобы применить созданную нами анимацию к тексту на странице используется правило animation с тремя основными значениями:
    Название анимации
    Длительность анимации. Указывается в секундах (1s, 2s, 3s и так далее)
    Бесконечная анимация или нет (если бесконечная, то указывается параметр infinite)
.animation-text { 
  animation: color-change 3s infinite;
}
Осталось создать параграф с необходимым классом, и анимация начнёт работать.

	НЕ РАБОТАЕТ
    Переменная создаётся с помощью конструкции --имя-переменной: значение. 
    --main-color: #000000;
    Если переменную нужно «встроить» глобально и использовать в любом месте CSS-файла, то используется специальный синтаксис :root, а внутри него записываются все нужные переменные.
:root {
  --main-color: #000000;
}
 И применяется она так:
.news-block {
  background-color: var(--main-color);
:root {
  --main-blue: #00bfff;
}
    
    
    С помощью правила position мы можем «выдернуть» блок из вёрстки и расположить так, как удобно. Основные значения position:
    relative (относительное позиционирование). Позволяет изменить расположение элемента относительно того места, где он был расположен до применения свойства. При этом, то место на странице, которое блок занимал ранее, останется. То есть другие блоки не будут вставать на место, где блок располагался до применения правила position.
    absolute (абсолютное позиционирование). «Вынимает» блок из HTML вёрстки и изменяет его расположение относительно левого верхнего угла cтраницы (или родительского элемента, если у него есть свойство position в значении fixed, absolute, relative, или sticky). В отличии от relative, место, где располагался absolute блок, будет удалено, и другие блоки смогут занять это место.
    fixed. Также, как и absolute, данное правило извлечёт блок из HTML вёрстки и расположит его в левом верхнем углу. Отличием от абсолютного позиционирования является то, что блок будет «следовать за страницей» и всегда находится в зоне видимости пользователя. Это удобно для создания меню, которые должны следовать за пользователем.
Для управления расположением используются 4 правила CSS: top, right, left и bottom, значением которых являются координаты (например, в пикселях), где будет расположен блок.
<style> 
  .absolute-position {
    position: absolute;
    top: 100px;
    left: 100px;  }</style>


Кратко:
	color: #333333;
  	font-size: 20px;
    font-weight; normal bold; (400 \ 700)
    font-style: normal italic oblique; (обычный вывод текста \ курсивное начертание \ косое начертание). Это КУРСИВ
    font-variant: normal small-caps; (нормальное написание текста \ капитель) Это КАПИТЕЛЬ
	text-decoration: underline line-through overline; (Подчёркивание текста \ Перечёркивание текста \ Надчёркивание текста)
	font-family   
    			  шрифт: * Times New Roman * Arial * Tahoma * Verdana * Courier New.
универсальноe семействo: serif(Times New Roman). sans-serif(Arial и Verdana). cursive. fantasy. monospace.
	font: 
		!font-style!, font-variant, font-weight, font-size/line-height, !font-family!
		(!стилистические правила!, размер шрифта, межстрочный интервал, !семейство шрифта!)
    border: 1px dotted #000; (ширина границы \ тип границы{solid/dotted/dashed} \ цвет границы)
	background-color: #FA7268; цвет фона
	width: 230px; ширина блока
    height: 25px; высота блока
	padding: 20px; внутренний отступ
    margin: 10px; внешний отступ


