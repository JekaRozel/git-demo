HTML
<p атрибуты></p> Параграф - блок текста, 
отделяемый от остального содержимого отступами снизу и сверху. парный. не уникальный - может быть множество.  Параграфы нельзя вкладывать друг в друга.
<p title="Всплывающая подсказка">текст</p>
 Атрибут — характеристика HTML - элемента, записывающийся в открывающем теге, и состоит из 2 частей: 
 Имя — название свойства. В примере выше таким свойством является title = " ".
    Значение атрибута - «Всплывающая подсказка»
Атрибут title является глобальным, его можно применять к любому элементу в HTML -разметке.
    Атрибут align  выравниваeт текст на странице. Может принимать значения center или right. ( left стоит по умолчанию).
    <p align="center" title="Текст по центру">Параграф с несколькими атрибутами</p>
 <b>Жирный текст </b> или <strong>Жирный текст</strong>. <i>Курсив</i> и <em>Курсив</em>. Tеги <b>/<i> будут только для физического выделения/разметки а <strong>/<em> для логического выделения/разметки.

          СПИСКИ
требуют вложенности одних тегов в другие. маркированный Unordered List, нумерованный Ordered List  элемент списка List Item. Возможно взаимное вложение (ol в ul и наооборот).
<ul атрибуты>
    <li>Первый элемент списка</li>
    <li>Второй элемент списка</li>
</ul> 

<h1>Заголовок первого уровня</h1>
<h2>Заголовок второго уровня</h2>
<h3>Заголовок третьего уровня</h3>
<h4>Заголовок четвёртого уровня</h4>
<h5>Заголовок пятого уровня</h5>
<h6>Заголовок шестого уровня</h6>

основныe элементы ТАБЛИЦЫ:
    Тег <table>. Определяет границу таблицы.
    Тег <tr>. Создание строки.
    Тег <td>. Создание ячейки.
    Тег <th>. Создание ячейки с заголовком.
 Основа: Строка с двумя ячйками 
<table>
    <thead>
      <tr> <!-- Строка Заголовка жирным -->
        <th> 1 Ячейка заголовка </th>
        <th> 2 Ячейка заголовка </th>
        <th> 3 Ячейка заголовка </th>
      </tr>
    </thead>
  <tbody> 
    <tr> <!-- Строка 1-->
      <td> 1 строка, 1 ячейка списка /\ </td>
      <td> 1 строка, 2 ячейка списка /\ </td>
      <td> 1 строка, 3 ячейка списка. </td>
    </tr>
    <tr> <!-- Строка 2-->
      <td> 2 строка, 1 ячейка списка /\</td>
      <td> 2 строка, 2 ячейка списка /\</td>
      <td> 2 строка, 3 ячейка списка.</td>
    </tr>
  </tbody>
</table>

Атрибуты таблицы.
1. width — ширина таблицы.
2. frame — создаёт границы вокруг таблицы.
3. align — выравнивание таблицы на странице.
4. border — создаёт рамку таблицы и ячеек.
5. bordercolor — цвет рамки.
6. bgcolor — цвет фона таблицы.
7. background — фоновый рисунок в таблице.
8. cellpadding — расстояние между рамкой и содержимым ячейки.
9. cellspacing — расстояние между ячейками.
10. rules — отменяет действие атрибута cellspacing.
11. summary — краткое описание таблицы
12. cols — указывает число столбцов, чем ускоряет загрузку таблицы.
13. colspan — объединяет ячейки по горизонтали.
14. rowspan — объединяет ячейки по вертикали.
а) Выравнивание и отступы на странице. margin: 10px auto 20px; (up, right, down, left)
б) Выравнивание и отступы внутри таблицы. Для выравнивания содержания всех ячеек таблицы, применяется свойство text-align ( left, center, right ).  В теги th, td вводится свойство padding, для увеличения отступа внутри таблицы, и тем самым увеличения высоты ячеек и всей таблицы.  Свойство padding вводится прямым включением для строк разной высоты. При этом нужно обязательно учитывать,что с учётом отступов, размеры ячеек по умолчанию регулируются размером содержания, и все ячейки и столбцы принимают размер наибольшей.
К th и td применяются атрибуты объединения ячеек:
 по горизонтали - атрибут colspan="число объединяемых ячеек".
 по вертикали - атрибут rowspan="число объединяемых ячеек".
Фоновое изображение в таблицу вставляется с помощью стилевого свойства background-image.
Для не фоновой картинки: 
Картинка вставляется как содержимое ячейки, между тегами <td></td>.
Чтобы картинка не сдвигала содержимое ячейки, делается следующее:
1. В тег <td> вводится стилевое свойство position:relative.
2. В тег <img> вводится стилевое свойство position:absolute, с указанием места для картинки top:0; left:0;

Для того, чтобы первую строку сделать заголовком, нужно совершить три действия:
1. Обернуть строку в тег <thead>. Это позволит в будущем задать оформление для строки с заголовками с помощью стилей.
2. Заменить теги <td> на <th>, которые специально созданы для обозначения заголовков таблиц. Помимо логического выделения таких столбцов, браузеры также выделяют текст внутри них жирным, что позволяет быстро находить эти заголовки в таблице.
3. добавление тега <tbody>. браузеры автоматически оборачивают им группу строк, которые не обёрнуты в другие теги. <tbody> чаще всего только один в таблице. В больших таблицах можно использовать несколько <tbody>, чтобы отделить разные секции в таблице, но в большинстве случаев в этом нет необходимости.

«Символы-мнемоники»  -  &название-символа
Гипперссылка - <a href="Ссылка на документ">Текст ссылки</a> Cсылки можно поделить на 3 типа:
* Относительные. Такие ссылки ссылаются на тот же сайт, с которого и происходит переход. <a href="/languages/html">Вернуться на выбор уроков</a>
* Абсолютные. Позволяют переходить на сторонние ресурсы в интернете. <a href="https://code-basics.ru/">Перейти на сайт Code Basics</a>
* Ссылки-якоря. Используются для перемещения внутри текущего документа. <a href="#anchor">Переход на главу 2</a>
 
<pre>
                             свободное
          оформление
                                             текста с атрибутом <pre></pre>
</pre>
 Для вставки картинки на страницу используется непарный тег <img>, у которого два обязательных атрибута: src и alt.
 атрибуты width и height, которые позволяют установить ширину и высоту для картинки.
<img src="https://example.com/images.png" alt="Подпись к фото" width="320" height="240">

Атрибуты width и height принимают значения в пикселях, указывать единицу измеренения не нужно.
 Базовая разметка
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Базовая разметка HTML</title>
</head>
<body>
    <h1>Code Basics</h1>
    <p>Бесплатные уроки по программированию и HTML для новичков</p>
</body>
</html>
* Блок head, содержащий мета-информацию о нашем сайте. Данные из этого блока не отображаются непосредственно на странице, а служат для её описания, подключения стилей и скриптов.
* Блок body является основным местом, где строится HTML-разметка. Данные в этом блоке будут обработаны и выведены в браузер.
* DOCTYPE (document type) — служебная информация для браузера, где описывается стандарт HTML, который нужно обработать. Текущий стандарт HTML5 поддерживается всеми браузерами, поэтому достаточно указать в первой строке документа <!DOCTYPE html>

    тег <title>, внутри которого содержится заголовок страницы тображаемый во вкладке браузера.
   <title>Code Basics: основы программирования</title>
    Для добавления описания страницы используется мета-тег description. В нём обычно дают краткое описание для страницы и часто его можно увидеть в результатах поиска в поисковых системах.
    <meta name="description" content="Бесплатные практические уроки по программированию для тех, кто начинает с нуля.">

Open Graph (og) — придуманный в компании Facebook набор мета-тегов, которые позволяют задавать уникальную картинку и описание страницы при публикации в социальных сетях. Данные мета-теги сейчас поддерживаются почти всеми известными социальными сетями и мессенджерами. Их добавление на страницу является хорошей практикой.
Основными og мета-тегами являются:
    og:title — заголовок страницы. При публикации в социальных сетях будет использоваться вместо заголовка <title>.
<meta property="og:title" content="Code Basics: основы программирования">
    og:description — описание страницы. Заменяет для социальных сетей описание из мета-тега description.
<meta property="og:description" content="Бесплатные практические уроки по программированию для тех, кто начинает с нуля.">
    og:image — изображение страницы. Один из важнейших og мета-тегов. Если он не указан, то робот старается автоматически найти картинку внутри страницы. Эти картинки не всегда находятся правильные по смыслу, поэтому можно чётко указать, какую картинку будет использовать социальная сеть.

<meta property="og:image" content="/images-header.png">

При отсутствии OG мета-тегов социальные сети будут брать данные из стандартных мета-тегов <title> и description на HTML странице.

маленькие иконки (фавиконки). Они, как и заголовок, позволяют быстро ориентироваться во вкладках и переходить на нужную, а также их используют поисковые системы, показывая их рядом с названием страницы в поиске.
<link rel="icon" href="/favicon64.png" type="image/png" sizes="64x64">
<link rel="icon" href="/favicon32.png" type="image/png" sizes="32x32">
<link rel="icon" href="/favicon16.png" type="image/png" sizes="16x16">
Разные устройства могут отображать иконки разных размеров и форматов, поэтому сейчас добавляется не одна, а сразу несколько иконок. У тега <link> возможно указать тип изображения и его размер. Делается это с помощью атрибутов type и sizes.

<head>
    <meta name="viewport" content="width=device-width, ">
</head>
  параметры задаются внутри атрибута content, свойства в котором разделяются запятой:
    width — ширина сайта. Указывается в пикселях. Возможно использование значения device-width для установки ширины страницы равной ширине устройства.
    height — высота сайта. Указывается в пикселях. Возможно использование значения device-height для установки высоты страницы равной высоте устройства.
    initial-scale — начальный коэффициент масштабирования. Может принимать значение от 0.1 до 10. Значение единица не масштабирует страницу по умолчанию.
    user-scalable — указывает, может ли пользователь масштабировать страницу, то есть приближать или отдалять её. Принимает значение yes и no

 Блочные - параграфы, списки, <pre>, <div>, заголовки, таблицы
 Строчные -  ссылки (<a>), теги начертания текста (<b>, <strong>, <i>, <em>), картинки, <span>

     Обязательный и главный тег формы - <form>, внутри располагаются поля для заполнения и кнопка действия. Основной атрибут - action путь к файлу, где располагается обработчик данных.(куда уйдут данные после отправки формы). 
<form action="/search"> </form> 
// Данные, после заполнения, будут отправлены на страницу(сервер) /search. Если данный атрибут не указан, данные уйдут на ту же страницу, откуда была отправлена форма.

<input> — создание текстового поля для ввода. Именно <input> присутствует во всех полях поиска.     <input type="text">
    <input> с указанием type="checkbox";
    <label>, в котором будет текст, связанный с нужным нам чекбоксом.
Для создания связи <label> с <input> тоже существует два способа:
    Связь по id. Для этого необходимо задать уникальный id для <input> и связать <label> с чекбоксом с помощью атрибута for.
<form>
    <input id="html" type="checkbox">
    <label for="html">Хочу изучать HTML</label>
</form>
  Либо  Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется.
<form>
    <label>
        <input type="checkbox">
        Хочу изучать HTML
    </label>
</form>
    Радиокнопка:S
Два варианта 
Первый:
 <form>
      <input id="yes" type="radio" name="question">
      <label for="yes">Да</label>
  </form>
Второй:  
<form>
    <label>
        <input type="radio" name="question" value="yes">
        Да
    </label>
    <br>
    <label>
        <input type="radio" name="question" value="no">
        Нет
    </label>
</form>

<textarea> является парным тегом. вы можете вложить в него текст по умолчанию(образец), атрибуты rows и cols, означающие количество строк и столбцов соответственно. используются чтобы установить одинаковое значение для всех браузеров

Выпадающий список
<form>
    <select>
        <option disabled>Какой курс вы хотите пройти?</option>
        <option>JS</option>
        <option>PHP</option>
        <option>Java</option>
        <option>Racket</option>
        <option>HTML</option>
        <option>CSS</option>
    </select>
</form>
disabled, чтобы заблокировать его для выбора, оставить заголовком выпавшего списка.
Для того, чтобы создать список с множественным выбором, у тега <select> добавляется атрибут multiple (Для выбора нескольких вариантов через Ctrl)
Это спискои где вместо ul/ol используется <select>, а вместо li используется <option>.

   Кнопка
<form action="/sendHere">
    <button>Отправить</button>
</form>
После нажатия на кнопку «Отправить», данные будут переданы обработчику, который указан в атрибуте action (если не указан, то данные отправятся на эту же страницу). После отправки данных страница будет перезагружена.

СЕМАНТИКА
Существуют две реализации семантического веба:

    На основе микроразметки. Это специальные атрибуты, которые добавляются в HTML-разметку и помогают роботам найти нужную информацию. Микроразметка используется чаще всего, так как имеет множество возможностей и полей для разметки.

    Используя стандарт HTML5. В стандарте появилось множество тегов, которые помогают роботам анализировать информацию, находить логические связи между блоками (или понимать, что их нет), искать необходимые части для корректного отображения на устройствах для чтения.

Пример семантической разметки на HTML5

<main> <!-- Определение основной части страницы -->
    <article> <!-- Определение статьи -->
        <header> <!-- Заголовочная информация статьи -->
            <h1>Название статьи</h1>
            <img src="article.png" alt="Заголовок статьи">
        </header>

        <p>Текст нашей статьи</p>

        <footer> <!-- «Подвал статьи» с указанием автора и даты -->
          <address> <!-- Информация об авторе статьи -->
              <p>Автор: Дмитрий</p>
              <p>Email: dmitry@test.test</p>
          </address>
          <time datetime="2019-07-27">27 июля</time> <!-- Дата написания статьи -->
        </footer>
    </article>
</main>
 
Микроразметка — простой инструмент, и создаётся с помощью дополнительных атрибутов HTML-тегов, позволяет выводить в результатах поискового запроса не только ссылку на сайт и небольшое описание, но и такие важные вещи, как контактные данные, время работы, адрес, номер телефона.
<section itemscope itemtype="http://schema.org/Organization">
    <h1>Компания «Прауд»</h1>
    <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
</section>
* itemscope — указатель на то, что весь блок является единой сущностью, в котором все данные связаны. Указывается только у главного блока и не имеет своего значения.
* itemtype — указывает на то, какой словарь будет использоваться. Например, для описания наших данных мы решили использовать словарь Organization, тогда полный вид атрибута будет itemtype="http://schema.org/Organization".

Основными семантическими тегами стали:
    <article>     <aside>    <footer>     <header>     <main>    <nav>    <section>
<nav> обычно используется только для главных навигационных областей, поэтому дополнительные меню (например, в футере) не оборачиваются в <nav>. Обратите внимание, что навигационных панелей в теге <nav> может быть и несколько. Нередко в тег <nav> оборачивают меню разделов. На сайте интернет-магазина таким меню может быть список категорий товаров. Так как эта панель является одной из основных для навигации по сайту, имеет смысл обернуть её в соответствующий тег.

kаждая HTML-страница содержит уникальный контент, который есть только на этой странице. Такая область размечается с помощью парного тега <main>. Это поможет устройствам для людей с ограниченными возможностями и поисковым роботам быстрее понять, где находится основной контент на странице. Страница должна иметь не более одного элемента <main> (это говорит о том, что в нём только уникальный контент)
 <section>, позволяющий разметить небольшой участок контента, связанный по смыслу с основным содержанием. Например, мы хотим разметить форму заказа услуги. Такой контент напрямую связан с содержанием нашей страницы, но не может существовать без него. В таком случае его можно разметить с помощью тега <section>.
Так как <section> является участком связанного между собой контента (раздел статьи, форма связи и т.д.), то зачастую внутри находится заголовок. Данное правило не является обязательным.----
<article>. Он предназначается для разметки секции, которая может быть использована самостоятельно и не привязана структурно к конкретной странице. Например, блок с курсом валют, погода, превью новости или статьи. Данные блоки хоть и могут напрямую касаться текущей страницы, но они представляют собой самостоятельную единицу, которая не потеряет смысл, если взглянуть на неё отдельно от контекста.
В связи с тем, что <article> может быть использован самостоятельно, он обязательно внутри себя содержит заголовок. <article> мы обернули в <section>
<aside>, внутри которого и располагается наша боковая панель. Обратите внимание, что <aside> содержится вне тега <main>. Этот контент не обязан быть уникальным на каждой странице. Он может быть уникальным для каждого конкретного раздела (если речь идёт, например, о меню). Если боковая панель уникальна для каждой страницы, то она должна быть расположена внутри тега <main>. 

 <h1 id="nev">Название статьи</h1>
Теперь опустимся в самый низ, и в конце кода страницы, напишем код и текст самой ссылки.
<p><a href="#nev">Вверх</a></p>
Можно сделать несколько якорных ссылок, на разные места страницы.
 <a href=”https://starper55plys.ru/#nev”>Текст ссылки</a>
Теперь на странице сайта появиться ссылка, пройдя по которой, Вы окажитесь в месте отмеченном якорем.


селектор {
	свойство: значение;
	}



Audio:
Простейший вид <audio src="путь к аудио-файлу" controls></audio>
 controls - добавляют панель управления(звук, прокрутка, воспроизведение... без него пустота)
а вариант:
<audio controls>
    <source src="https://example.com/audio.mp3">
    <source src="https://example.com/audio.ogg">
</audio>
позволяет браузеру выбрать поддерживаемый формат
   Видео
Простейший <video src="https://example.com/our-video.mp4" controls></video>
Выбор для браузера
<video controls>
    <source src="https://example.com/our-video.mp4" type="video/mp4">
    <source src="https://example.com/our-video.webm" type="video/webm">
    <source src="https://example.com/our-video.ogg" type="video/ogg">
</video>
.mp4 поддерживают все браузеры
Обязателен type - по нему браузер примет решение, какой файл необходимо загрузить.
Тег <video> имеет несколько важных атрибутов:
* controls — Добавляет элементы управления для видеоплеера.
* autoplay — Автоматическое воспроизведение после загрузки видео.
* width — Ширина видеоплеера.
* height — Высота видеоплеера.

Ol,ul,li Title align b,strong i,em table,tr,td;thead,tr,th 
<table> <thead><tr><th></thead> <tbody><tr><td></tbody></table>


