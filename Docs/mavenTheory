	Maven
Собирает проект, создаёт jar-архивы, генерирует документацию. Плюс - управление зависимостями (сторонних библиотек), не зависит от ОС.
mvn -version
mvn archetype:generate -DgroupId=названиеГруппы  (archetype модуль/плагин отвечающий за геренерирование каркаса проекта, -D организация которой проетк принадлежит); enter; выдаёт список возможных папок/репозиториев для каркаса проекта, если ничего не выбрать, то он сделает заглушку проекта, предложив выбрать версию quick start проекта. 
выбираем версию, предлагает выбрать artifactId(уникальное название проекта внутри группы), предлагает выбрать версию проекта.
теперь проект создан.
Появилась папка содержащая папку src(main(исходные коды и ресурсы)  test(исходныек коды тестов) и файл pom.xml. 
project object model управляет проектом.
  Циклы сборки и основные команды:
 Три основных цикла (lifecycle): clean, default(or build), site;
 Основные этапы(phase) подциклов: /последовательно зависимы(если вызываем mvn compile, то 1 и 2 выполнятся автоматом)
подготовка ресурсов -(*-resources)
валидация - validate
компиляция - compile
тестирование - test
упаковка JAR/WAR/EAR - package
установка(в репозиторий) - install
деплой - deploy
/ создание сайта-документации - site
 Команды (goals):
pre-clean
clean
post-clean

 профиль сборки (buil profile) - набор конфигурационных значений(свойств) которые могут быть использованы для переопределения стандартных значений сборщика maven
полезны для определения параметров сборки для различных сред окружения (основные development, testng, production) (вступают в силу на этапе сборки проектa)
 Их три основных:
- профиль проекта pom.xml(в корне проекта)
- settings.xml в папке user/home/.m2/settings.xml
- settings.xml глобальный в папке maven
  Для активации профиля из локального pom.xml
* необходимо команде сборки указать атрибуты -P и идентификатор профиля(id);
* можно сделать привязку в самом профиле(hook) указываем параметр 
-DимяАктивации=значениеАктивации;
* можно запускать по-умолчанию в профиле указав activeByDefault true;
  Для активации профиля из .m2/settings.xml:
 в нём создаем тег <activeProfiles> где указываем activeProfile.
/ -P !(.m2),(pom) обход приоритета .m2;
env-dev env-prod предпочтительные названия профилей по дефолту.

  Репозитории - это место где хранятся все джава-архивы, библиотеки, плагины и любые нужные для проекта артефакты.(должен иметь id & url) Бывают:
-local создаётся при первом запуске любой команды maven. изменяем в глобальном settings.xml
-central (https://search.maven.org/#browse) /если зависимости нет в локальном, то ищет тут.
-remote /для хранения собственных зависимостей.

  Плагин - утилита/программа состоящая из подкомпонентов целью которых является выполнение набора команд. (в maven каждая команда выполняется каким-либо плагином).
mvn [plugin-name]:[goal-name] 
Бывают двух видов:
build(сборки) & report(отчётов)
 
Транзитивные зависимости Transitive Dependecies
 Транзитивность в том, что не надо подключать вручную зависимости, содержащиеся в подключённых вами библиотеках. В случае нескольких вариантов зависимостей выбирается наименее вложенная(первая встреченная). В dependencyManagment можно указа в ручную. 

Scope - области видимости/действия. Директива в зависимости, позволяющая указать в каком случае подключать зависимость. Указывается в тэге dependency. Может быть:
compile provided runtime test import (по умолчанию compile/(import)).

Модули позволяют структурировать код.
Для создания модульного проекта необходимо указаывать packaging(тип упаковки) pom;
B Project -> new module -> artefactId с маленькой буквы -> modulе name с большой;




для винды shift+f10 открыть папку в консоли 











