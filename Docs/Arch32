 Setup Arch
 Ставим английский, поэтому  В файле /etc/locale.gen раскоментируем строку #en_US.UTF-8 UTF-8
Обновим текущую локаль системы:
locale-gen
Чтобы проверить соединение, попробуйте, работает ли ping -c 5 archlinux.org
Включите синхронизацию времени через интернет: timedatectl set-ntp true
 доступные часовые зоны для Европы: timedatectl list-timezones | grep Europe
Установите ваш часовой пояс: timedatectl set-timezone Europe/Minsk
Проверяем timedatectl status
Создаем разделы на диске через fdisk:
sgdisk --zap-all /dev/sdX - далить MBR или GPT таблицы
partprobe
fdisk /dev/sdX
 o enter
 
    (1) 512Mb под /boot; (dev/sdX1)
    (2) SWAP под файл подкачки; (dev/sdX2)
    (3) FREE_SPACE под корень; (dev/sdX3)

Форматируем /boot раздел в FAT32:
Также мы будем использовать для удобства метки. mkfs.vfat -F32 /dev/sdX1
Для раздела подкачки (swap): mkswap /dev/sdX2 -L swap 
Форматируем корень в ext4: mkfs.ext4 /dev/sdX3 -L root

Смонтируем корневой раздел: mount /dev/sda3 /mnt
Создадим каталог для монтирования boot раздела:  mkdir /mnt/boot
Смонтируем загрузочный раздел: mount /dev/sda1 /mnt/boot
Подключим swa swapon /dev/sda2
Установка пакетов

Установим базовые пакеты системы.
pacstrap -i /mnt base base-devel grub linux linux-headers nano dhcpcd 

Первичная настройка системы
Сгенерируем fstab, для этого используем следующую команду: genfstab -p /mnt >> /mnt/etc/fstab
Перейдём в установленную систему: arch-chroot /mnt /bin/bash (либо arch-chroot /mnt) 
либо можно отдавать команды в систему из текущего положения arch-chroot /mnt pacman -S grub

Создадим загрузочный RAM диск mkinitcpio -p linux
Установим загрузчик (для BIOS) grub-install /dev/sda
grub-mkconfig -o /boot/grub/grub. cfg
Зададим хостнейм echo MYHOSTNAME > /etc/hostname (либо hostnamectl set-hostname myhostname)
Изменим пароль root passwd
Добавим нового пользователя useradd -m -g users -G audio,games,lp,optical,power,scanner,storage,video,wheel -s /bin/bash MYUSERNAME 
passwd MYUSERNAME
exit
umount -R /mnt
перезагрузка.
Будучи в системе под root:
pacman-key --init
pacman-key --populate archlinux32
pacman -S sudo
visudo либо в файле /etc/sudeoers раскомментируем «# %wheel ALL=(ALL) ALL» 
Отключаем IPv6
Для этого создадим новый файл /etc/sysctl.d/10-ipv6.conf с содержимым:
net.ipv6.conf.all.disable_ipv6 = 1
Настройка сети Для проводной сети
systemctl enable dhcpcd
systemctl start dhcpcd
Обновим базы данных пакетов: pacman -Syy
Обновим все пакеты: pacman -Su 

Теперь можно зайти в пользователя.
 
В файле /etc/locale.gen раскомментируем строку #en_US.UTF-8 UTF-8 
locale-gen
Настроим часовой пояс: ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
Выполним hwclock, чтобы сгенерировать файл /etc/adjtime, в котором хранятся соответсвующие настройки. hwclock --systohc --utc

Графическое окружение
Установим X:
sudo pacman -S xorg-server xorg-xinit xorg-apps mesa-libgl xterm (тачпад или тачскрин, то установите xf86-input-synaptics)

установка и настройка графического окружения Xfce с менеджером входа SDDM: 
sudo pacman -S xfce4 xfce4-goodies sddm
Добавим sddm в демоны: sudo systemctl enable sddm.service
 Важно sudo systemctl reboot
 Печаль sddm не грузят. Пробуем другие
 
теперь можно и шрифты:
sudo pacman -S ttf-liberation ttf-dejavu opendesktop-fonts ttf-bitstream-vera ttf-arphic-ukai ttf-arphic-uming ttf-hanazono
 
!!! GRUB!!!
# mount /dev/sda2 /mnt           //mount arch
# mkdir -p /mnt/boot/efi
# mount /dev/sda1 /mnt/boot/efi   //mount uefi into arch

# arch-chroot /mnt grub-install /dev/sda

pacman -Rdd удаления невзирая на зависимости УДАЛИЛИ LINUX-HARDENED  



Arch after install: 
1 	sudo pacman -S linux-lts 
2 	sudo grub-mkconfig -o /boot/grub/grub.cfg 
3 	sudo pacmna -S linux-lts-headers 
4 	sudo pacman -Rsu linux 
намучaлся и прочёл в комментах : "Если бы я хотел ЛТС, то я 
не ставил бы арч". вернул как было

# 4. Install some key packages
sudo pacman -S adobe-source-sans-pro-fonts aspell-en enchant gst-libav gst-plugins-good hunspell-en icedtea-web jre8-openjdk languagetool libmythes mythes-en pkgstats ttf-anonymous-pro ttf-bitstream-vera ttf-dejavu ttf-droid ttf-gentium ttf-liberation ttf-ubuntu-font-family
# 2. Install Microcode

For intel processors with grub boot loader: sudo pacman -S intel-ucode sudo grub-mkconfig -o 
/boot/grub/grub.cfg

For AMD processors install linux-firmware package.

# 3. Disable GRUB delay

Add the following to /etc/default/grub:
# achieve the fastest possible boot:
GRUB_FORCE_HIDDEN_MENU="true"

Then put file 31_hold_shift to /etc/grub.d/.
Download 31_hold_shift https://goo.gl/nac6Kp

Make it executable, and regenerate the grub configuration:
sudo chmod a+x /etc/grub.d/31_hold_shift
sudo grub-mkconfig -o /boot/grub/grub.cfg


# 5. Set up firewall

Install ufw:
sudo pacman -S ufw

Enable it.
sudo ufw enable 

Check its status:
sudo ufw status verbose

Enable the start-up with the system:
sudo systemctl enable ufw.service

Reboot and check the status again. It should be active.

# 6. Encrypt your home directory

Logged out. Switch to a console with Ctrl+Alt+F2. Login as a root and check that your user own no processes:
ps -U username 

Install the necessary applications: 
sudo pacman -S rsync lsof ecryptfs-utils

Then encrypt your home directory: 
modprobe ecryptfs
ecryptfs-migrate-home -u username

Mount your encrypted home.
ecryptfs-mount-private

Unwrap the passphrase and save it somewhere where only you can access it.
ecryptfs-unwrap-passphrase

Run
ls .ecryptfs

Edit /etc/pam.d/system-auth:

After the line "auth required pam_unix.so" add: 
auth    required    pam_ecryptfs.so unwrap

Above the line "password required pam_unix.so" insert: 
password    optional    pam_ecryptfs.so

After the line "session required pam_unix.so" add: 
session    optional    pam_ecryptfs.so unwrap

Reboot and make sure that you can login to your desktop

# 7. Remove orphans

sudo pacman -Rns $(pacman -Qtdq)

# 8. Optimize pacman's database access speeds

sudo pacman-optimize

9. Check for errors

sudo systemctl --failed
sudo journalctl -p 3 -xb


10. Backup the system

sudo rsync -aAXvP --delete --exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt/* --exclude=/media/* --exclude=/lost+found --exclude=/home/.ecryptfs / /mnt/backupDestination/




bluetooth in Arch
systemctl start bluetooth.service
sudo modprobe btusb
bluetoothctl
// что  тут делал вообще не понятно
$ git clone git://git.archlinux.org/svntogit/packages.git --single-branch --branch "packages/linux"
$ cp -r packages/trunk linux-git
$ rm -rf packages
$ cd linux-git
$ mv config config.x86_64
# replace PKGBUILD with the one in this post
$ makepkg -o #this setups up the src directory
-------здесь не работало поэтому чтобы собрать надо было:

gpg --list-keys
GNUPGHOME=/etc/pacman.d/gnupg makepkg
cd src/linux/
$ git revert -n 15a4417cc65212d2cf895e872d9757b0785af4f4 #revert the commit believed to be the cause
$ cd ../..
$ makepkg -ersi

sudo chown jk -R /путь к испольняемому файлу, на который не хватает прав




