Java Быстрый старт
JavaCode(.java) -> JAVACcompiller -> ByteColde(.class) -> JVM
 
javax.imageio ImageIO - для вставки картинок  
javax.swing JFrame - новое окно
java.awt Graphics - библиотеки для рисования
java.io IOException - exception

картинки для игры надо помещать в bin/
private static Image drop;
drop = ImageIO.read(GameWindow.class.getResourceAsStream("drop.png"));

	Коллекции в Java:
коллекции - набор объектов либо пара ключ - значение. созданы для big data. 
Набор классов и методов для работы с коллекциями - Java Collections API
Основные 3 типа коллекций
LIST упорядоченный (последовательный)
SET порядок не важен 
MAP пара - ключ-значение.
редкий - Queue(очередь)
  По иерархии:
1)
 интерфейс Iterator <E> ... hasNext(); E next(); void remove(); /есть ли следующий элемент, берём его, удаляем предыдущий.	
 интерфейс Iterable <T> ... Iterarator<T> iterator(); Использует предыдущй интерфейс через метод iterator(), ИСПОЛЬЗУЕТСЯ В collection.
2)
 interface Collection <E> extends Iterable<E>
-int size();  количество элементов
-boolean isEmpty();  проверка на пустоту
-boolean contains(Object element);  содержит ли элемент
-boolean add(E element);  добавление элемента
-boolean remove(Object element);  удаление элемтена
-Iterator<E> iterator(); возвращает iterator 
3)
 множество set	/не может содержать 2 одинаковых элемента.
Включает в себя
 3.1)
    интерфейс SortedSet
 3.2)
  Реализации:
    HashSet<E> используют для сортировки где выводятся только уникальные элеменыт списка(массива). /сравнивает по ссылкам. / Set<E> mas = new HashSet<E>(); /большинство операций за О(1); / хранит в корзинках, которых по умолчанию 16.
    LinkedHashSet<E> /хранит лементы отсортированными в порядке добавления;
    TreeSet<E> implements Sortedset<E> /хранит элементы отсортированными (с помощью красно-черного дерева), большинство операций за O(log(N)); должно сравнивать элементы на входе внутрь множества(упорядочевать при добавленни);     
4)
 List
 4.1) 
    ArrayList<E> на основе массива; сложность добавления О(N), сложность доступа к конкретному элементу О(1)
    LinkedList<E> на основе двусвязного списка; сложность добавления О(1), сложность доступа к конкретному элементу О(N)
// массив строго упорядоченое расположение
в списке объект хранит ссылки на пердыдущий и следующий объекты.
односвязный только на следующий
двусвязный на предыдущий и следующий
 4.2)
    Мар<K, V>
    -HashМар<K, V>	большинсто операций за О(1)
    -TreeMap<K, V>  хранит данные уррорядочено по ключам
    -LinkedHasMap<K, V>  хранит в порядке добавления ключей.
// по сути HashSet это упрощённый HashMap у которого второе значение постоянно / HashSet<E> HashMap<E, CONSTANT>

	Stream API. (не I/O)
java.util.stream.
Stream API поток представляет канал передчи данных из источника данных (файлы, массивы, коллекции). 
 !не путать с I/O (многопоточность, inputStream, outputStream)
Стримы можно создать из коллекции, из значений, из массив и т.д

////
почитать бинарные деревья
синхронизацию коллекций
абстрактные методы 
абстрактный класс может содержать обычные методы и абстрактные, не может объекты.
если класс содержит хотя бы один абстрактный метод, то он обязан быть сам абстрактным.
Байт-код Java — набор инструкций, исполняемых виртуальной машиной Java. Каждый код операции байт-кода — один байт. Используются не все 256 возможных значений кодов операций. 51 из них зарезервированы для использования в будущем.
 SOLID — это аббревиатура пяти основных принципов проектирования в объектно-ориентированном программировании — Single responsibility, Open-closed, Liskov substitution, Interface segregation и Dependency inversion. В переводе на русский: принципы единственной ответственности, открытости / закрытости, подстановки Барбары Лисков, разделения интерфейса и инверсии зависимостей

ArrayList array = new ArrayList(2);
в данном случае двойка означает размер конейнера, т.е. всего зарезервировано место под два элемента. В действительности, размер контейнера равен нулю, т.к. в нём пока нет элементов
ArrayList это списочный последовательный контейнер и элементы в нём хранятся в порядке добавления
array.add(1, 7);
означает, цифру семь нужно вставить в первый элемент, т.к. этот контейнер последовательный и порядок добавления в него слева направо, то при добавлении элемента, цифра шесть сместиться вправо и станет вторым элементом в контейнере


 
		Батруха видео для новичков
	Переменную можно объявиь:
  В классе(вне метода - "instance переменная", "свойство объекта", "поле".
- описывает характеристику объекта или просто является внутренней пременной
- уничтожается вместе с объектом
- область видимости - видна во всех методах класса
- чаще всего - имеет доступ через гетер/сеттер (но может и не иметь)
- используется модификатор доступа( даже если не указан явно)
- инициализируется по-умолчанию(если значение не указано)

 Внутри метода - локальная переменная
- уничтожается сразу после выполнения метода
- область видимости - только внутри метода
- нельзя использовать модификатор доступа 
- обязательно нужно инициализировать

Течение, поток программы (flow)
- понятие программ flow или просто flow - течение, ход работы программы (обычно изображается в блок-схемах или UML диаграммах)
- в зависимости от значения переменных ход программы может "менять направление"
- процесс работы программы - обычно последовательность вызовов методов у объектов (создается специальный "ытек вызовов"  - в каком порядке вызываются методы)
- кроме условных операторов етчение программы могут менять и другие операторы (или исключитеьлные ситуации)

	== -> Проверяет ссылки на объекты, не сами объекты. 

    Метод equals()
- используется для сравнения объектов одного типа
- если не создавать метод вручную - используется реализация по-умолчанию из класса Object
- для всех объектов желательно реализовывать метод equals()
- часто на собеседованиях спрашивают про сравнение объектов и метод equals()
- обыно переопределяют сразу 2 метода: equals & hashCode (используется для однозначного сравнения объектов и для распределинея внутри некоторых коллекций).

 Цикл используется когда надо выполнить какую-либо конструкцию кода многократно, либо до выполнения какого-либо условия. (for, while, do while)

  Комментарии применяются для 
- описания части кода
- для генерации документации на основе комментариев специального вида
 
  Рефакторинг - изменение структуры кода и оптимизация строения программы для лучшего понимания кода без изменения его функционала. В IDE есть готовый набор команд рефакторинга

  Константы.
 Константа - хранение постоянныхзанчений в классе или программе
 Константа - специальный вид переменной, котороая принимает значение только один раз
 ключевое слово final (существует слово const из других языков но не используется)
 обычно используется вместе со static
 большими буквами через _
 !!! константы можно инициализировать в конструкторе
 
 Антипаттерн - как НЕ нужно программировать. Антипаттерн "магические числа" - использование в коде числа, назначение которого непонятно (решение - создание константы с понятным именем).
 Интерфейсы часто используют как хранилище глобальных констант, т.к. в интерфейсе все переменные по-умолчанию константы.

 Режим отладки, есть похожее понятие profiling

 API - application progrmming interface - доступная функциональность программы или библиотеки
 Надо различать
  - доступ через графический интерфейс для клиента
  - доступ на программном уровне ( с использованием API)
 Существуют различные API (операционной системы, библиотек ...) - функции, доступные для внешних выовов.
 Подключает API сама IDE, но надо знать что это чаще всего jar файл с набором готовых классов. При запуске программы этот jar должен быть доступен в classpath(это параметр для JVM или компилятора, который указывает, где назодятся дополнительные библиотеки, необходимые для компиляции и запуска проекта.

	Вызовы методов
- вызов метода типа void без присвоения значения
- вызов метода и присвоение в переменную возвращаемого значения (типы должны совпадать)
- вызов меотда и передача возвращаемого значения как параметр (последовательный вызов по типу матрёшки) // объект.метод(объект.метод(объект.метод()))
- вызов метода и возврата резльтата в качестве return  для другого метода (типы должны совпадать)
- вызов метода, который в конце снова вызывет себя до тех пор , пока не выполнится определённое условие( РЕКУРСИЯ ).
  return можно использовать в void методах для досрочного выхода.
  в методе может быть несколько return (условия, циклы)
 
 Ссылки на объекты
 Ссылка - переменная, которая ссылается на объект
 Варианты ссылок: у объекта есть -
одна ссылка;
ни одной ссылки;
несколько ссылок на себя;
есть ссылка но нет объекта. //NullPointerException  
 Из-за большого кол-ва объектов появляется проблема производительности, тогда можно явно "занулить"(obj = null) ссылки на объекты.

	toString, equals, hashCode
 Это реализации по-умолчанию для всеобщего родилея Object. 

toString 
 текстовое представление объекта,
 удобочитаемый вид,
 часто вызвается автоматически, везде где нужно представить объект в виде текста

equals
 используется для сравнения объектов,
 сами выбираем критерии сравнения, 
 сравнение объектов по значениям полей объекта,
 если его не переопределить, то все передаваемые объекты при сравнении будут выдавать false
 им сравнивают ссылочные переменные
 если объект используется в коллекции, то этот метод надо обязательно переопределить.

hashCode
 числовое представление объекта(результат обработки хеш функции)
 equals и hashCode обычно переопределяют одновременно
 hashCode часто используют для объектов в коллекциях на основе hash для эффективного хранения и поиска нужного объекта
 если два объекта равны по equals то и их hashCode тоже должын быть равны( но наоборот - не обязательно: разные объекты могут возвращать один hashCode)


	Передача параметров
 - По ссылке (ByRef) - передаётся ссылка на объект
 - По значению (ByVal) - передаётся копия значения

В Java ВСЕ ПАРАМЕТРЫ ПЕРЕДАЮТСЯ ПО ЗНАЧЕНИЮ

 При передаче параметра в метод(или конструкцию) - создаётся его локальная копия, которая действует только в пределах метода(конструктора)

Varargs (String... args) ожидает неопределённое кол-во объектов.  






























// Alt + Ins переопределени методов
// Нех - шестнадцатиричная система

