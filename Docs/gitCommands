Sзагрузить можн git-scm.com/downloads
---
…or create a new repository on the command line
echo "# Repo" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:JekaRozel/Repo.git
git push -u origin master
-
…or push an existing repository from the command line
git remote add origin git@github.com:JekaRozel/Repo.git
git push -u origin master
---
git clone "ключ с гита" загрузить с гитхаба
ssh-keygen -t rsa -b 4096 -C "commentsMayUseEmail" можно и без -b 4096
git config --global user.name "name"
git config --global user.email "email"
git config --list --show-origin 
git remote -v проверка что мы в origin
git status преверка что ждёт коммита
git add file добавляем в коммит ожидающий файл
git commit -m "comments" создание коммита с коментарием
git log следим за коммитами
git push отправление с локального на удалённый репозиторий (синхронизация)
git pull (сочетает git fetch и git merge) подтягивание с удалённого на локальный репозиторий
git pull origin ветвь - подтягивания конкретной ветви

 Локальыне ветви
git branch посмотреть в какаой ты ветке
git branch --list посмотреть список ветвей   q - выйти из списка
git checkout имя - переключение на ветвь "имя"
git checkout имя^ - переключение на родителя ветви "имя".(^^ - прарoдителя и т.д.)
git branch -f master HEAD~3 (-forced - принудительно) перенести ветку master на 3 коммита выше HEAD
git reset HEAD (можно ~n) на предыдущий коммит в локале
git revert HEAD отмена изменений в онлайн репозитории (появляется коммит с отменёнными изменениями)
git cherry-pick <Commit1> <Commit2> <...> копировать несколько коммитов на место, где сейчас находишься (HEAD)
git rebase someBranch копирует набор коммитов(из той где сейчас(HEAD) и переносит их в другое место (в конец someBranch, поэтому ещё из someBranch надо rebase HEAD) 
git rebase -i (HEAD~n) (работa с n количеством коммитов) (pick - переключение его означает, что нужно выкинуть коммит.)

 Удалённые ветви
git fetch --all извлекаем последние изменения из удалённого репозитория
git branch --r список ветвей удалённого репозитория
git branch -a   (всё)где я и какие ещё есть.
git branch имя - создание новой ветви с именем "имя"
git branch -m новоеИмя - изменить имя текущей ветви
git branch -m имя новоеИмя - изменить имя другой(не той в которой находитесь) ветви
git branch -d имявети - удалить ветвь (безопасно, проверяет все ли изменнения закомичены и внесены)
git branch -D имяветви - удалить принудительно
git bracnh --delete имяветви  - удалить remote-ветвь 

 работа с предыдущими ветками
git log - список коммитов
git show fe83f9 - посмотреть изменения
git diff 0ef9fe..f39fe8 - разницa между коммитами (лучше git difftool)
git checkout mk3l43h3 File.txt - откатываем File.txt к коммиту номер mk3l43h3
git revert HEAD - исправление последнего 
git revert er8f8ww - исправление коммита номер er8f8ww 

при конфликтах надо исправлять вручную, затем add & commit 

в файле .gitignore перечисляем те файлы которые нам не надо коммитить, а сам файл .gitignore добовляем (add-commit-push).

git remote add origin https://github.com/jekarozel/git-demo.git (url писал из головы, что-то похожее) push в пустой репозиторий.
git push --set-upstream origin ub - прописать родителя origin ветке ub.
git gui & графический(текстовй интерфейс) /rescann(перечитать). кликать на иконку
gitk графическое отображение (для ветвения)

	Из курса EPAM "Git version control"
 Варианты работы Lock-Modify-Unlock(я работаю с файлом - он заблокирован для всех остальных); Copy-Modify-Merge(все работают с файлом параллельно, программа сама следит за содержимым).; combined.
 Copy-Modify-Merge делятся ещё на 2 типа: 
 Centralized, на компе один файл
 Distributed, на компе репозиторий со всей историей.
 Git checkout . - отменить все изменения во всех файлах до коммита
 git clean -xdf где(x-игнорим гитигнор, d-удаляем дириктории, f-принудительно)  удаление новых файлов, для которых нет предыдущих версий.
 git reset file - после add но до commit
 после commit можно дописать закомиченный файл - git commit --amend -m "message"
 либо вообще его отменить - git reset HEAD^^(либо HEAD~2)
 Так же есть три варианта флагов для reset:
 -soft(возврат из закоммиченного в аддед, -mixed(по-умолчанию, из закоммиченного в файловую систему (до аддед)), -hard(полное удаление, без возможности восстановить).
 git revert sh1 - отмена push
 .gitignore
 
 fast-forward merge - переброс HEAD одной ветки на HEAD другой, тем самым объединяя их слияние в одну удлиннённую ветку, включающую промежуточные коммиты обеих веток.
 git checkout -b ветка - создание и переход на ветку "ветка".
 git merge b1 добавляем b1 в текущую ветку  
 non fast-forward merge - все остальные. не просто перенос HEAD, если другая ветка создана на основе предыдущих HEAD коммитов, слияние всего. при fast-forward мы бы потеряли HEAD.
 тупо списал:
 git merge --abort
 git checkout --Xours --Xtheir
 git diff
 git revert 09fe472
 merge tool
 короткие коммиты, видимые изменения, частые мержы.
 rebase - накинуть свою ветку на уже созданные (после ответвления нашей ветки) коммиты
 cherry-pick копирование одного из ноывх коммитов основной ветви себе в ветвь.
 
 ветка в файловой системе занимaет 41байт
 git branch --all
 tag - маркер для пометки коммитов. Это не комментарий, это метка, к ней можно обращаться/переключаться. можно git push --tags запушить тэги а не коммиты, git tag tagname; git tag --list; git checkout tagname.
 stash - возможность сохранить текущую работу во временное хранилище.
 git stash save "description" сохранить работу
 git stash list список
 git stash pop (and remove from stash) извлечь с удалением из стеша
 git stash apply (leave in stash) извлечь не удаляя из стеша
 git stash drop (clear).
remote
 add:
  git remote add <name> <url>
  git remote add origin git@github.com:user/repo.git
  view:
   git remote -v
   git remote show <name>
